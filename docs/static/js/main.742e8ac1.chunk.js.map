{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAHW,kBAKZA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SATvB,2CAAH,sDCEPY,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAa,IAAD,EACXd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAerC,OATAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAC,GACnBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGlB,CAACnB,IAEGoB,EDb0BK,CAAazB,GAAjCY,EADwB,EAC7BL,KAAaY,EADgB,EAChBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDf,IAElDmB,GAAW,mBAAGJ,UAAU,wCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADCA,EAAIC,aEanBgB,EA1BM,WAAO,IAAD,EAEaxC,mBAAS,CAAC,cAFvB,mBAEhByC,EAFgB,KAEJ1C,EAFI,KAUvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEI0C,EAAWnB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,U,MChB9B4B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.742e8ac1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange  }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ZMcqKiNzZPbLndh4vzjWFBKvFlR84Psu`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    return data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n};","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    const { data:images, loading } = useFetchGifs(category);\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"card animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n            {\n                images.map((img) => (\n                    <GifGridItem \n                        key={ img.id }\n                        { ...img } \n                    />\n                ))\n            }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) =>{\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        });\n    }, [category]);\n\n    return state; \n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'Otra']);\n    //     // el callback recibe el estado anterior y devuelve el nuevo\n    //     setCategories(cats => [...cats, 'Otra']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n            {\n                categories.map(category => \n                    <GifGrid \n                        key={ category }\n                        category={ category } \n                    />)\n            }\n        </>\n    )\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));"],"sourceRoot":""}